#!/usr/bin/env python3
"""
create_missing_people_pages.py

Reads data/people.yml and ensures per-person pages exist for EN and FR:
  content/en/people/<slug>/index.md
  content/fr/people/<slug>/index.md

- Creates leaf bundles only if they don't exist (never overwrites).
- Populates front matter with fields from YAML.
- Bio goes in the body if present; otherwise a compact summary is used.
- Handles personnel_type as string or list.

Usage:
  python create_missing_people_pages.py --site-root /path/to/your/hugo/site
  # Optional flags:
  #   --data-file data/people.yml     (default shown)
  #   --dry-run                       (show actions, do not write)
"""

import argparse
import os
import sys
import yaml
import re
from datetime import datetime

def slugify(s: str) -> str:
    s = (s or "").lower()
    s = re.sub(r"[^a-z0-9]+", "-", s)
    s = re.sub(r"-+", "-", s).strip("-")
    return s

def ensure_person_bundle(site_root, lang, person, dry_run=False):
    """Create content/<lang>/people/<slug>/index.md if missing."""
    slug = person.get("slug") or slugify(f"{person.get('first_name','')} {person.get('last_name','')}")
    name = person.get("name") or f"{(person.get('first_name') or '').strip()} {(person.get('last_name') or '').strip()}".strip() or slug

    bundle_dir = os.path.join(site_root, "content", lang, "people", slug)
    index_md = os.path.join(bundle_dir, "index.md")

    if os.path.exists(index_md):
        print(f"[{lang}] ✓ Exists: {index_md}")
        return False  # not created

    # front matter (keep only non-empty values)
    fm = {
        "title": name,
        "slug": slug,
        "first_name": person.get("first_name"),
        "last_name": person.get("last_name"),
        "email": person.get("email"),
        "affiliation": person.get("affiliation"),
        "role": person.get("role"),
        "project": person.get("project"),
        "personnel_type": person.get("personnel_type"),
        "photo": person.get("photo"),
        "website": person.get("website"),
        "orcid": person.get("orcid"),
        "github": person.get("github"),
        "links": person.get("links"),
        "aliases": [f"/{lang}/people/{slug}/"],
        # you can force a layout if you want:
        # "type": "people",
        # "layout": "person",
    }
    fm = {k: v for k, v in fm.items() if v not in (None, "", [])}

    # body
    bio = (person.get("bio") or "").strip()
    if bio:
        body = bio + "\n"
    else:
        parts = []
        if person.get("role"): parts.append(f"**Rôle :** {person['role']}")
        if person.get("affiliation"): parts.append(f"**Affiliation :** {person['affiliation']}")
        if person.get("project"): parts.append(f"**Projet :** {person['project']}")
        ptype = person.get("personnel_type")
        if isinstance(ptype, list) and ptype:
            parts.append("**Type :** " + ", ".join(str(x) for x in ptype))
        elif isinstance(ptype, str) and ptype:
            parts.append(f"**Type :** {ptype}")
        if person.get("email"):
            parts.append(f"**Email :** [{person['email']}](mailto:{person['email']})")
        body = "\n\n".join(parts) + "\n" if parts else "\n"

    # write
    print(f"[{lang}] + Create: {index_md}")
    if dry_run:
        return True

    os.makedirs(bundle_dir, exist_ok=True)
    with open(index_md, "w", encoding="utf-8") as f:
        f.write("---\n")
        yaml.safe_dump(fm, f, allow_unicode=True, sort_keys=False)
        f.write("---\n\n")
        f.write(body)

    return True

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--site-root", required=True, help="Path to your Hugo site root")
    ap.add_argument("--data-file", default="data/people.yml", help="Path to YAML data file (default: data/people.yml)")
    ap.add_argument("--dry-run", action="store_true", help="Show what would be created without writing files")
    args = ap.parse_args()

    site_root = os.path.abspath(args.site_root)
    data_file = os.path.join(site_root, args.data_file) if not os.path.isabs(args.data_file) else args.data_file

    if not os.path.isdir(site_root):
        print(f"ERROR: site root not found: {site_root}")
        sys.exit(1)
    if not os.path.isfile(data_file):
        print(f"ERROR: data file not found: {data_file}")
        sys.exit(1)

    with open(data_file, "r", encoding="utf-8") as f:
        data = yaml.safe_load(f) or {}
    people = data.get("people") or []
    if not isinstance(people, list):
        print("ERROR: data.people must be a list.")
        sys.exit(1)

    created = 0
    for p in people:
        # EN
        if ensure_person_bundle(site_root, "en", p, dry_run=args.dry_run):
            created += 1
        # FR
        if ensure_person_bundle(site_root, "fr", p, dry_run=args.dry_run):
            created += 1

    stamp = datetime.now().strftime("%Y-%m-%d %H:%M")
    print(f"\nDone [{stamp}]. Created {created} page(s). Dry-run={args.dry_run}")

if __name__ == "__main__":
    main()
